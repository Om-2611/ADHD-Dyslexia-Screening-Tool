import jsPDF from 'jspdf';
import { TestResult, UserData } from '../services/firebase';

export interface PDFGenerationOptions {
  includeAnswers?: boolean;
  includeQuestions?: boolean;
  includeUserInfo?: boolean;
}

export const generateTestResultPDF = (
  testResult: TestResult,
  userData?: UserData,
  options: PDFGenerationOptions = {
    includeAnswers: true,
    includeQuestions: true,
    includeUserInfo: true
  }
): void => {
  const doc = new jsPDF();
  let yPosition = 20;
  const lineHeight = 10;
  const pageHeight = doc.internal.pageSize.height;
  const margin = 20;

  // Helper function to add text with page break handling
  const addText = (text: string, fontSize: number = 12, isBold: boolean = false) => {
    if (yPosition > pageHeight - margin) {
      doc.addPage();
      yPosition = 20;
    }
    
    doc.setFontSize(fontSize);
    if (isBold) {
      doc.setFont('helvetica', 'bold');
    } else {
      doc.setFont('helvetica', 'normal');
    }
    
    doc.text(text, margin, yPosition);
    yPosition += lineHeight;
  };

  // Helper function to add wrapped text
  const addWrappedText = (text: string, fontSize: number = 12, isBold: boolean = false) => {
    const maxWidth = doc.internal.pageSize.width - 2 * margin;
    doc.setFontSize(fontSize);
    if (isBold) {
      doc.setFont('helvetica', 'bold');
    } else {
      doc.setFont('helvetica', 'normal');
    }
    
    const lines = doc.splitTextToSize(text, maxWidth);
    for (const line of lines) {
      if (yPosition > pageHeight - margin) {
        doc.addPage();
        yPosition = 20;
      }
      doc.text(line, margin, yPosition);
      yPosition += lineHeight;
    }
  };

  // Title
  addText('Mental Health Screening Test Results', 18, true);
  yPosition += 5;

  // User Information
  if (options.includeUserInfo && userData) {
    addText('User Information:', 14, true);
    addText(`Name: ${userData.displayName || 'N/A'}`);
    addText(`Email: ${userData.email}`);
    addText(`User ID: ${userData.uid}`);
    yPosition += 5;
  }

  // Test Information
  addText('Test Information:', 14, true);
  addText(`Test Title: ${testResult.testTitle}`);
  addText(`Test Type: ${testResult.testType.toUpperCase()}`);
  addText(`Test ID: ${testResult.testId}`);
  addText(`Date Taken: ${testResult.completedAt ? testResult.completedAt.toLocaleDateString() : 'N/A'}`);
  addText(`Duration: ${Math.floor(testResult.duration / 60)} minutes ${testResult.duration % 60} seconds`);
  yPosition += 5;

  // Calculate score and result
  let totalScore = 0;
  const answerCount = Object.keys(testResult.answers).length;
  
  Object.values(testResult.answers).forEach(answer => {
    totalScore += answer.value;
  });

  let result = 'N/A';
  if (testResult.testType === 'adhd') {
    result = totalScore >= 6 ? 'Positive' : 'Negative';
  } else if (testResult.testType === 'dyslexia') {
    result = totalScore >= 10 ? 'Positive' : 'Negative';
  }

  // Results Summary
  addText('Results Summary:', 14, true);
  addText(`Total Score: ${totalScore}`);
  addText(`Number of Questions: ${answerCount}`);
  addText(`Result: ${result}`, 12, true);
  yPosition += 5;

  // Result Interpretation
  addText('Result Interpretation:', 14, true);
  if (result === 'Positive') {
    addWrappedText(
      'This result suggests that you may have symptoms consistent with the condition being tested. ' +
      'Please consult with a qualified healthcare professional for proper diagnosis and treatment options.'
    );
  } else {
    addWrappedText(
      'This result suggests that your symptoms are not strongly indicative of the condition being tested. ' +
      'However, if you continue to have concerns, please consult with a qualified healthcare professional.'
    );
  }
  yPosition += 5;

  // Detailed Answers
  if (options.includeAnswers && options.includeQuestions) {
    addText('Detailed Responses:', 14, true);
    yPosition += 2;

    Object.entries(testResult.answers).forEach(([questionId, answer]) => {
      // Question
      addWrappedText(`${questionId}. ${answer.questionText}`, 11, true);
      
      // Answer
      addText(`   Answer: ${answer.text} (Score: ${answer.value})`, 10);
      addText(`   Category: ${answer.subcategory}`, 10);
      addText(`   Type: ${answer.questionType}`, 10);
      yPosition += 2;
    });
  } else if (options.includeAnswers) {
    addText('Answer Summary:', 14, true);
    Object.entries(testResult.answers).forEach(([questionId, answer]) => {
      addText(`${questionId}. ${answer.text} (Score: ${answer.value})`);
    });
  }

  // Footer
  yPosition = pageHeight - 30;
  doc.setFontSize(8);
  doc.setFont('helvetica', 'normal');
  doc.text('Generated by Mental Health Screening Platform', margin, yPosition);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, margin, yPosition + 5);
  doc.text('This report is for informational purposes only and should not replace professional medical advice.', margin, yPosition + 10);

  // Save the PDF
  const fileName = `${testResult.testType}-test-results-${testResult.id}-${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
};

export const generateUserTestHistoryPDF = (
  userData: UserData,
  testResults: TestResult[]
): void => {
  const doc = new jsPDF();
  let yPosition = 20;
  const lineHeight = 8;
  const pageHeight = doc.internal.pageSize.height;
  const margin = 20;

  // Helper function to add text with page break handling
  const addText = (text: string, fontSize: number = 12, isBold: boolean = false) => {
    if (yPosition > pageHeight - margin) {
      doc.addPage();
      yPosition = 20;
    }
    
    doc.setFontSize(fontSize);
    if (isBold) {
      doc.setFont('helvetica', 'bold');
    } else {
      doc.setFont('helvetica', 'normal');
    }
    
    doc.text(text, margin, yPosition);
    yPosition += lineHeight;
  };

  // Title
  addText('Test History Report', 18, true);
  yPosition += 5;

  // User Information
  addText('User Information:', 14, true);
  addText(`Name: ${userData.displayName || 'N/A'}`);
  addText(`Email: ${userData.email}`);
  addText(`Member Since: ${userData.createdAt ? userData.createdAt.toLocaleDateString() : 'N/A'}`);
  addText(`Total Tests Taken: ${testResults.length}`);
  yPosition += 5;

  // Test Summary
  addText('Test Summary:', 14, true);
  
  const testsByType = testResults.reduce((acc, test) => {
    if (!acc[test.testType]) {
      acc[test.testType] = [];
    }
    acc[test.testType].push(test);
    return acc;
  }, {} as Record<string, TestResult[]>);

  Object.entries(testsByType).forEach(([testType, tests]) => {
    addText(`${testType.toUpperCase()}: ${tests.length} test(s)`, 12, true);
  });
  yPosition += 5;

  // Detailed Test History
  addText('Detailed Test History:', 14, true);
  yPosition += 2;

  testResults
    .sort((a, b) => (b.completedAt?.getTime() || 0) - (a.completedAt?.getTime() || 0))
    .forEach((test, index) => {
      let totalScore = 0;
      Object.values(test.answers).forEach(answer => {
        totalScore += answer.value;
      });

      let result = 'N/A';
      if (test.testType === 'adhd') {
        result = totalScore >= 6 ? 'Positive' : 'Negative';
      } else if (test.testType === 'dyslexia') {
        result = totalScore >= 10 ? 'Positive' : 'Negative';
      }

      addText(`${index + 1}. ${test.testTitle}`, 12, true);
      addText(`   Date: ${test.completedAt ? test.completedAt.toLocaleDateString() : 'N/A'}`);
      addText(`   Duration: ${Math.floor(test.duration / 60)}:${(test.duration % 60).toString().padStart(2, '0')}`);
      addText(`   Score: ${totalScore}`);
      addText(`   Result: ${result}`);
      yPosition += 3;
    });

  // Footer
  yPosition = pageHeight - 30;
  doc.setFontSize(8);
  doc.setFont('helvetica', 'normal');
  doc.text('Generated by Mental Health Screening Platform', margin, yPosition);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, margin, yPosition + 5);

  // Save the PDF
  const fileName = `test-history-${userData.email}-${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
};

export const generateTestPDF = async (test: TestResult, user: UserData) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const margin = 20;
  let y = margin;

  // Add title
  doc.setFontSize(20);
  doc.text('Test Result Report', pageWidth / 2, y, { align: 'center' });
  y += 20;

  // Add user information
  doc.setFontSize(12);
  doc.text('User Information:', margin, y);
  y += 10;
  doc.setFontSize(10);
  doc.text(`Name: ${user.displayName || 'N/A'}`, margin, y);
  y += 7;
  doc.text(`Email: ${user.email || 'N/A'}`, margin, y);
  y += 7;
  doc.text(`Date Joined: ${user.createdAt?.toLocaleDateString() || 'N/A'}`, margin, y);
  y += 20;

  // Add test information
  doc.setFontSize(12);
  doc.text('Test Information:', margin, y);
  y += 10;
  doc.setFontSize(10);
  doc.text(`Test Type: ${test.testType?.toUpperCase() || 'N/A'}`, margin, y);
  y += 7;
  doc.text(`Date Taken: ${test.timestamp?.toDate().toLocaleDateString() || 'N/A'}`, margin, y);
  y += 7;
  doc.text(`Duration: ${(test.duration / 60).toFixed(2)} minutes`, margin, y);
  y += 20;

  // Add test results
  doc.setFontSize(12);
  doc.text('Test Results:', margin, y);
  y += 10;
  doc.setFontSize(10);

  // Calculate total score
  let totalScore = 0;
  if (test.answers) {
    Object.values(test.answers).forEach(answer => {
      if (answer?.value) {
        totalScore += answer.value;
      }
    });
  }

  const maxScore = test.answers ? Object.keys(test.answers).length * (test.testType === 'adhd' ? 4 : 1) : 0;
  const percentage = maxScore > 0 ? (totalScore / maxScore) * 100 : 0;

  doc.text(`Total Score: ${totalScore} / ${maxScore}`, margin, y);
  y += 7;
  doc.text(`Percentage: ${percentage.toFixed(1)}%`, margin, y);
  y += 20;

  // Add detailed answers
  if (test.answers) {
    doc.setFontSize(12);
    doc.text('Detailed Answers:', margin, y);
    y += 10;
    doc.setFontSize(10);

    Object.entries(test.answers).forEach(([, answer]) => {
      if (y > doc.internal.pageSize.getHeight() - margin) {
        doc.addPage();
        y = margin;
      }

      const questionText = answer.questionText || 'Question';
      const answerText = `Answer: ${answer.value}`;
      
      // Split long questions into multiple lines
      const splitText = doc.splitTextToSize(questionText, pageWidth - (margin * 2));
      doc.text(splitText, margin, y);
      y += 7 * splitText.length;
      doc.text(answerText, margin, y);
      y += 10;
    });
  }

  // Save the PDF
  const fileName = `test-report-${user.email}-${test.timestamp?.toDate().toISOString().split('T')[0] || 'unknown'}.pdf`;
  doc.save(fileName);
};